This topic includes the following sections:

* [Architecture Diagram](#diagram)
* [Diego Components](#core)
	* [Diego Brain](#brain-components)
	* [Diego Cell](#cell-components)
	* [Database VMs](#database-vms)
	* [Consul](#consul)
* [Platform-specific Components](#core)
	* [Garden Backends](#backends)
	* [App Lifecycle Binaries](#lifecycles)

##<a id='diagram'></a> Architecture Diagram

Cloud Foundry uses the Diego architecture to manage application containers. Diego components assume application scheduling and management responsibility from the Cloud Controller. 

Refer to the following diagram and descriptions for information about the way Diego handles application requests.

<% if vars.product_name == 'CF' %>
<%= image_tag("../images/diego/diego-flow.png") %>
View a larger version of this image at the [Diego Design Notes repo](http://htmlpreview.github.io/?https://raw.githubusercontent.com/cloudfoundry-incubator/diego-design-notes/master/clickable-diego-overview/clickable-diego-overview.html).
<% else %>
<%= image_tag("../images/diego/diego-flow-other.png") %>
<a href="../images/diego/diego-flow-other.png" target="_blank">View a larger version of this image.</a>
<% end %>


1. The Cloud Controller passes requests to stage and run applications to several components on the [Diego Brain](#brain).

1. The Diego Brain components translate staging and running requests into [Tasks and Long Running Processes](./diego-auction.html#processes) (LRPs), then submit these to the [Bulletin Board System](#bbs) (BBS) through an API over HTTP.

1. The BBS submits the Tasks and LRPs to the [Auctioneer](#auctioneer), part of the [Diego Brain](#brain-components).

1. The Auctioneer distributes these Tasks and LRPs to [Cells](#cell-components) through an [Auction](./diego-auction.html). The Diego Brain communicates with Diego Cells using SSL/TLS protocol.

1. Once the Auctioneer assigns a Task or LRP to a Cell, an in-process [Executor](#executor) creates a [Garden](#garden) container in the Cell. The Task or LRP runs in the container.

1. The [BBS](#bbs) tracks desired LRPs, running LRP instances, and in-flight Tasks. It also periodically analyzes this information and corrects discrepancies to ensure consistency between `ActualLRP` and `DesiredLRP` counts.

1. The [Metron Agent](#metron-agent), part of the Cell, forwards application logs, errors, and metrics to the Cloud Foundry Loggregator. For more information, see the [Application Logging in Cloud Foundry](../../devguide/deploy-apps/streaming-logs.html) topic.

##<a id='core'></a>Diego Components##

Diego components run and monitor Tasks and LRPs. 

###<a id='brain-components'></a>Diego Brain ###

Diego Brain components distribute Tasks and LRPs to Diego Cells, and correct discrepancies between `ActualLRP` and `DesiredLRP` counts to ensure fault-tolerance and long-term consistency. 

The Diego Brain consists of the following:

* [Auctioneer](#auctioneer)
* [CC-Uploader](#cc-uploader)
* [File Server](#file-server)
* [SSH Proxy](#ssh-proxy)
* [TPS Watcher](#tps)
* [TCP Route-emitter](#tcp)
* [Nsync](#nsync)
* [Stager](#stager)

<a id='auctioneer'></a>

#### Auctioneer ####

- Uses the [auction package](https://github.com/cloudfoundry-incubator/auction) to run Diego Auctions for Tasks and LRPs

- Communicates with Cell [Reps](#rep) over SSL/TLS

- Maintains a lock in the BBS that restricts auctions to one Auctioneer at a time

Refer to the [Auctioneer repository](https://github.com/cloudfoundry-incubator/auctioneer) on GitHub for more information.

####<a id='cc-uploader'></a>CC-Uploader ####

- Mediates uploads from the Executor to the Cloud Controller

- Translates simple HTTP POST requests from the Executor into complex multipart-form uploads for the Cloud Controller

Refer to the [CC-Uploader repository](https://github.com/cloudfoundry-incubator/cc-uploader) on GitHub for more information.

####<a id='file-server'></a>File Server ####

- This "blobstore" serves static assets that can include general-purpose [App Lifecycle binaries](#app-lifecycles) and application-specific droplets and build artifacts.

Refer to the [File Server repository](https://github.com/cloudfoundry-incubator/file-server) on GitHub for more information.

####<a id='ssh-proxy'></a>SSH Proxy ####

- Brokers connections between SSH clients and SSH servers running inside instance containers

Refer to [Understanding Application SSH](./ssh-conceptual.html), [Application SSH Overview](../../devguide/deploy-apps/app-ssh-overview.html), or the [Diego SSH Github repository](https://github.com/cloudfoundry-incubator/diego-ssh) for more information.

####<a id='tps'></a>TPS Watcher ####

- Provides the Cloud Controller with information about currently running LRPs to respond to `cf apps` and `cf app APP_NAME` requests

- Monitors `ActualLRP` activity for crashes and reports them the Cloud Controller

Refer to the [TPS repository](https://github.com/cloudfoundry-incubator/tps) on GitHub for more information.

####<a id='tcp'></a>TCP Route-emitter ####

- Monitors `DesiredLRP` and `ActualLRP` states, emitting TCP route registration and unregistration messages to the Cloud Foundry [routing API](https://github.com/cloudfoundry-incubator/routing-api) when it detects changes

- Periodically emits TCP routes to the Cloud Foundry routing API

#### <a id='nsync'></a>Nsync ####

- Listens for app requests to update the `DesiredLRPs` count and updates `DesiredLRPs` through the BBS

- Periodically polls the Cloud Controller for each app to ensure that Diego maintains accurate `DesiredLRPs` counts

Refer to the [Nsync repository](https://github.com/cloudfoundry-incubator/nsync) on GitHub for more information.

#### <a id='stager'></a>Stager ####

- Translates staging requests from the Cloud Controller into generic Tasks and LRPs

- Sends a response to the Cloud Controller when a Task completes

Refer to the [Stager repository](https://github.com/cloudfoundry-incubator/stager) on GitHub for more information.

###<a id='cell-components'></a>Diego Cell ###

Diego Cell components manage and maintain Tasks and LRPs.

The Diego Cell consists of the following:

* [Rep](#rep)
* [Executor](#executor)
* [Garden](#garden)
* [Metron Agent](#metron-agent)
* [Route-emitter](#route-emitter)

####<a id='rep'></a>Rep ####

- Represents a Cell in Diego Auctions for Tasks and LRPs

- Mediates all communication between the Cell and the BBS

- Ensures synchronization between the set of Tasks and LRPs in the BBS with the containers present on the Cell

- Maintains the presence of the Cell in the BBS

- Runs Tasks and LRPs by asking the in-process Executor to create a container and `RunAction` recipes

Refer to the [Rep repository](https://github.com/cloudfoundry-incubator/rep) on GitHub for more information.

####<a id='executor'></a>Executor ####

- Runs as a logical process inside the Rep

- Implements the generic Executor actions detailed in the [API documentation](https://github.com/cloudfoundry-incubator/receptor/blob/master/doc/actions.md)

- Streams `STDOUT` and `STDERR` to the Metron agent running on the Cell

Refer to the [Executor repository](https://github.com/cloudfoundry-incubator/executor) on GitHub for more information.

####<a id='garden'></a>Garden ####

- Provides a platform-independent server and clients to manage Garden containers

- Defines the [Garden-runC](https://github.com/cloudfoundry/garden-runc-release) interface for container implementation

See the [Garden](../architecture/garden.html) topic or the [Garden repository](https://github.com/cloudfoundry-incubator/garden) on GitHub for more information.

####<a id='metron-agent'></a>Metron Agent ####

Forwards application logs, errors, and application and Diego metrics to the [Loggregator](https://github.com/cloudfoundry/loggregator) Doppler component

Refer to the [Metron repo](https://github.com/cloudfoundry/loggregator/tree/develop/src/metron) on GitHub for more information.

####<a id='route-emitter'></a>Route-emitter ###

- Monitors `DesiredLRP` and `ActualLRP` states, emitting route registration and unregistration messages to the Cloud Foundry [Gorouter](https://github.com/cloudfoundry/gorouter) when it detects changes

- Periodically emits the entire routing table to the Cloud Foundry Gorouter

Refer to the [Route-Emitter repo](https://github.com/cloudfoundry-incubator/route-emitter) on GitHub for more information.

###<a id='database-vms'></a>Database VMs ###

The Diego database VM consists of the following components. 

####<a id='bbs'></a>Diego Bulletin Board System ####

- Maintains a real-time representation of the state of the Diego cluster, including all desired LRPs, running LRP instances, and in-flight Tasks

- Provides an RPC-style API over HTTP to [Diego Core](#core) components and external clients, including the [SSH Proxy](#ssh-proxy) and [Route Emitter](#route-emitter).

- Ensure consistency and fault tolerance for Tasks and LRPs by comparing desired state (stored in the database) with actual state (from running instances)

- Acts to keep `DesiredLRP` count and `ActualLRP` count synchronized in the following ways:
    - If the `DesiredLRP` count exceeds the `ActualLRP` count, requests a start auction from the Auctioneer
    - If the `ActualLRP` count exceeds the `DesiredLRP` count, sends a stop message to the Rep on the Cell hosting an instance

- Monitors for potentially missed messages, resending them if necessary

Refer to the [Bulletin Board System repo](https://github.com/cloudfoundry-incubator/bbs) on GitHub for more information.

####<a id='mysql'></a>MySQL ####

- Provides a consistent key-value data store to Diego


####<a id='locket'></a>Locket ####

- Provides a consistent key-value store for maintenance of distributed locks and component presence

####<a id='gomysqldriver'></a>Go MySQL Driver ####

The Diego BBS stores data in MySQL. Diego uses the Go MySQL Driver to communicate with MySQL.

Refer to the [Go MySQL Driver repo](https://github.com/go-sql-driver/mysql) on GitHub for more information.

###<a id='consul'></a>Consul ###

- Provides dynamic service registration and load balancing through DNS resolution

Refer to the [Consul repo](https://github.com/hashicorp/consul) on GitHub for more information.

##<a id='platform-specific'></a>Platform-specific Components ##

###<a id='backends'></a>Garden Backends ###

Garden contains a set of interfaces that each platform-specific backend must implement. See the [Garden](../architecture/garden.html) topic or the [Garden repository](https://github.com/cloudfoundry-incubator/garden) on GitHub for more information.

###<a id='app-lifecycles'></a>App Lifecycle Binaries ###

The following three platform-specific binaries deploy applications and govern their lifecycle:

- The **Builder**, which stages a CF application. The Builder runs as a Task on every staging request. It performs static analysis on the application code and does any necessary pre-processing before the application is first run.

- The **Launcher**, which runs a CF application. The Launcher is set as the Action on the `DesiredLRP` for the application. It executes the start command with the correct system context, including working directory and environment variables.

- The **Healthcheck**, which performs a status check on running CF application from inside the container. The Healthcheck is set as the Monitor action on the `DesiredLRP` for the application.

####<a id='lifecycle-implementations'></a>Current Implementations ####

- [Buildpack App Lifecycle](https://github.com/cloudfoundry-incubator/buildpack-app-lifecycle) implements the Cloud Foundry buildpack-based deployment strategy.

- [Docker App Lifecycle](https://github.com/cloudfoundry-incubator/docker-app-lifecycle) implements a Docker deployment strategy.
