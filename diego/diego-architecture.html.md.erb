---
title: Diego Architecture
---

This documents provides an overview of the high-level structure of Diego, the next-generation container management system for Cloud Foundry (CF). 

* To deploy Diego, see the GitHub [Diego-Release](https://github.com/cloudfoundry-incubator/diego-release).
* For more information about the major components of Diego and how they interact with other Cloud Foundry components, see the [Diego Components](./diego-components.html) topic.

##<a id='overview'></a>Overview

In a Cloud Foundry deployment without Diego, the [Cloud Controller](../architecture/cloud-controller.html) schedules and manages applications on the [Droplet Execution Agents](../architecture/execution-agent.html) (DEAs). Diego replaces the DEAs and the [Health Manager](../architecture/index.html#hm9k), and assumes application scheduling and management responsibility from the Cloud Controller.

Refer to the diagram and descriptions below for information about the way Diego handles application requests.

<%= image_tag("../images/diego/diego-flow.png") %>

1. The Cloud Controller passes requests to stage and run applications to [CC-Bridge](./diego-components.html#bridge-components).

1. CC-Bridge translates staging and running requests into [Tasks and Long Running Processes](#processes) (LRPs), then  submits these to the [Bulletin Board System](./diego-components.html#bbs) (BBS) through an RPC-style API over HTTP. 

1. The BBS provides Tasks and LRPs to the [Auctioneer](./diego-components.html#auctioneer). 

1. The Auctioneer distributes these Tasks and LRPs to [Cells](./diego-components.html#cell-components) through an Auction.

1. Once the Auctioneer assigns a Task or LRP to a Cell, an in-process [Executor](./diego-components.html#executor) creates a [Garden](./diego-components.html#garden) container in the cell. The Task or LRP runs in the container.

1. The BBS also tracks desired LRPs, running LRP instances, and in-flight Tasks for the [Converger](./diego-components.html#converger). The Converger periodically analyzes this information and corrects discrepancies, ensuring that Diego is eventually consistent.

1. [Metron Agents](./diego-components.html#metron-agent) forward application logs, errors, and application and Diego metrics to the [Loggregator](https://github.com/cloudfoundry/loggregator) Doppler component.
 
## <a id='processes'></a>Tasks and Long Running Processes

Diego runs and monitors two types of processes: **Tasks** and **Long Running Processes** (LRPs). 

* <a id='task'></a>**Tasks**: Tasks run once, for a finite amount of time.
   
    Example Tasks: Making a database schema change, bulk importing data to initialize a database, setting up a connected service

* <a id='lrp'></a>**Long Running Processes** (LRPs): LRPs run continuously, for an indefinite time. LRPs only terminate if stopped or killed, or in the case of failure. Diego can run multiple instances of any LRP.
    
	Example LRPs: A web-server, a service that continuously accepts input and processes it, an application

For more information about how Diego schedules Tasks and LRPs, see the [the Diego Auction](./diego-auction.html). 

## <a id='monitoring'></a>Monitoring and Testing

You can monitor and test runtime deployment using the following releases:

###Inigo

Inigo is an integration test suite that launches the Diego components through various test cases, including component failures and other exceptional scenarios. Inigo validates a given set of component versions to ensure mutual compatibility, robustness, and that in failure conditions performance degrades gracefully.

Refer to the [Inigo repo](https://github.com/cloudfoundry-incubator/inigo) on GitHub for more information.

###Auction

Diego allocates Tasks and LRPs to the executing cells using the [Diego Auction](./diego-auction.html). 

The Auction package encodes behavioral details for the Diego Auction. It includes a simulation test suite that validates the optimal performance of the auction algorithm. You can run the simulation for different algorithm variants at various scales, and in the following ways:

- In-process, for quick feedback loops

- Across multiple processes, to reveal the impact of communication in the auction

- Across multiple machines in a cloud-like infrastructure, to reveal the impact of latency on the auction

Refer to the [Auction repo](https://github.com/cloudfoundry-incubator/inigo) on GitHub for more information.

###Diego Acceptance Tests

Diego Acceptance Tests (DAT) is a suite of acceptance-level tests that run against Cloud Foundry and Diego deployment releases. The purpose of DAT is to execute a number of "happy-path" test cases across an entire deployment.

Refer to the [Diego Acceptance Test  repo](https://github.com/cloudfoundry-incubator/diego-acceptance-tests) on GitHub for more information.
