##<a id='add-new-stack'></a>Adding a New Stack ##

To add a new stack, you first create it as a BOSH job template, following [BOSH release directory format](http://bosh.io/docs/create-release.html). Then you configure your Diego manifest to add the job template to the list of cell jobs, and also add it to the list of available stacks in the CF manifest.

The following example adds a new Linux-based `pancakes` stack for use with garden-linux. As a real-world use case, a custom stack could support applications that require an older version of CentOS or Ubuntu.

###<a id='add-new-stack'></a>Create a BOSH Job Template ##

Create a BOSH release `pancakes-release` for a job template that expands your stack into a subdirectory on the host machine, typically under `/var/vcap/packages` or `/var/vcap/data`. For example, a `pancakes-rootfs` template might create a full Linux root file system in the directory ‘/var/vcap/packages/pancakes-rootfs/rootfs’. See the [‘rootfses’ job template in diego-release](https://github.com/cloudfoundry/cflinuxfs2-rootfs-release/tree/master/jobs/cflinuxfs2-rootfs-setup) for one way to do this.

* In your `pancakes-release`, include a `pancakes-app-lifecycle` package and job template containing a gzipped tar archive of the lifecycle binaries, `pancakes-app-lifecycle.tgz`. 
Lifecycle binaries are the helper programs that stage and run apps on your stack. For examples of app lifecycle binary source code, see the diego-release repo:
  * [Buildpack App Lifecycle](https://github.com/cloudfoundry-incubator/diego-release/tree/develop/packages/buildpack_app_lifecycle)
  * [Docker App Lifecycle](https://github.com/cloudfoundry-incubator/diego-release/tree/develop/packages/docker_app_lifecycle)
  * [Windows App Lifecycle](https://github.com/cloudfoundry-incubator/diego-release/tree/develop/packages/windows_app_lifecycle)  

* The job template spec file must list the`pancakes-app-lifecycle` package as a
 dependency, but the job does not have to do anything. When `pancakes-app-lifecyle` is listed as a dependency, BOSH adds the binary to `/var/vcap/packages` to make it available.

###<a id='diego-manifest'></a>Update the Diego Manifest ###

1. Add the `pancakes-rootfs` job and release name to the Diego manifest, along with other job templates defined for the `cell` object. Adding this job template to the Diego manifest makes the expanded rootfs available locally on the Diego cell, at ‘/var/vcap/packages/pancakes-rootfs/rootfs’. For example, in the manifests generated with the [spiff-based tooling](https://github.com/cloudfoundry-incubator/spiff) in the `diego-release`, add the lines shown in **bold** to the following list of cell job templates:

    <pre>
      &ndash; name: rep
        release: diego
      &ndash; name: consul_agent
        release: cf
      &ndash; name: garden
        release: garden-linux
      &ndash; name: rootfses
        release: diego
      &ndash; <b>name: pancakes-rootfs
        release: pancakes</b>
      &ndash; name: metron_agent
        release: cf
    </pre>
  
1. Tell the cell rep how to associate the `pancakes` stack with the file system root location that the `pancakes-rootfs` job sets up on the cell. To do this, add a new pair `pancakes:/var/vcap/packages/pancakes-rootfs/rootfs` to the property list `diego.rep.preloaded_rootfses`, which already associates the `cflinuxfs2` stack with the location `/var/vcap/packages/rootfs_cflinuxfs2/rootfs`:

```
- cflinuxfs2:/var/vcap/packages/rootfs_cflinuxfs2/rootfs
```

From https://github.com/cloudfoundry-incubator/diego-release/blob/5dc8fcc23dcbbb8ae4b8248c032c7d70d8436d73/manifest-generation/diego.yml
preloaded_rootfses: (( property_overrides.diego.rep.preloaded_rootfses || ["cflinuxfs2:/var/vcap/packages/cflinuxfs2/rootfs"]

to the two-item list (additions in bold):

```
- cflinuxfs2:/var/vcap/packages/rootfs_cflinuxfs2/rootfs
- pancakes:/var/vcap/packages/pancakes-rootfs/rootfs
```

1. If you created a ‘pancakes-app-lifecycle’ job template in the ‘pancakes’ release, colocate it with the Diego job that has the file-server. Currently this is the ‘access’ job, so its job template list would change from:

<pre>
    - name: ssh_proxy
      release: diego
    - name: consul_agent
      release: cf
    - name: metron_agent
      release: cf
    - name: file_server
      release: diego
</pre>

to:

```
    - name: ssh_proxy
      release: diego
    - name: consul_agent
      release: cf
    - name: metron_agent
      release: cf
    - name: file_server
      release: diego
    - name: pancakes-app-lifecycle
      release: pancakes
```

1. Configure the stager and nsync components to relate the ‘pancakes’ stack to the ‘pancakes’ lifecycle binary bundle: change the ‘diego.stager.lifecycle_bundles’ and ‘diego.nsync.lifecycle_bundles’ BOSH properties from

```
      - "buildpack/cflinuxfs2:buildpack_app_lifecycle/buildpack_app_lifecycle.tgz"
      - "buildpack/windows2012R2:windows_app_lifecycle/windows_app_lifecycle.tgz"
      - "docker:docker_app_lifecycle/docker_app_lifecycle.tgz"
```

to (additions in bold):

```
      - "buildpack/cflinuxfs2:buildpack_app_lifecycle/buildpack_app_lifecycle.tgz"
      - "buildpack/pancakes:pancakes-app-lifecycle/pancakes-app-lifecycle.tgz"
      - "buildpack/windows2012R2:windows_app_lifecycle/windows_app_lifecycle.tgz"
      - "docker:docker_app_lifecycle/docker_app_lifecycle.tgz"
```

###<a id='cf-manifest'></a>Update the CF Manifest ###

1. Configure CC with the new stack by adding it to the ‘cc.stacks’ property in the CF manifest. For example, this would change the default stack list from

```
      - name: "cflinuxfs2"
        description: "Cloud Foundry Linux-based filesystem"
```

to (additions in bold):

```
      - name: "cflinuxfs2"
        description: "Cloud Foundry Linux-based filesystem"
      - name: "pancakes"
        description: "Linux-based filesystem, with delicious pancakes"
```


