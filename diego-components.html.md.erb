---
title: Diego Components
---

The diagram below illustrates the major components of Diego and how they interact with other Cloud Foundry components.

![Diego Overview](../images/diego/diego-overview.png)
[Enlarge image](http://htmlpreview.github.io/?https://raw.githubusercontent.com/cloudfoundry-incubator/diego-design-notes/master/clickable-diego-overview/clickable-diego-overview.html)

This table maps out the components in the image above:

<table border="1" class="nice" >
<tr>
  <th width=8%><strong>Color</strong></th>
  <th width=37%><strong>Function</strong></th>
  <th width=25%><strong>Location</strong></th>
  <th width=30%><strong>Notes</strong></th>
</tr>
<tr>
  <td>Blue</td>
  <td>Runs and monitors Tasks and Long Running Processes (LRPs)</td>
  <td><a href="https://github.com/cloudfoundry-incubator/diego-release">Diego Release</a></td>
  <td></td>
</tr>
<tr>
  <td>Red</td>
  <td>Translates app-specific messages from the Cloud Controller to the Receptor</td>
  <td><a href="https://github.com/cloudfoundry-incubator/diego-design-notes#cc-bridge-components">Diego CC-Bridge Components</a></td>
  <td></td>
</tr>  
<tr>
  <td>Yellow</td>
  <td>Supports streaming logs and routing to containers that Diego manages</td>
  <td><a href="https://github.com/cloudfoundry-incubator/diego-release">Diego Release</a> and <a href="https://github.com/cloudfoundry/cf-release">CF-Release</a></td>
  <td>The <a href="https://github.com/cloudfoundry-incubator/lattice">Lattice</a> distribution includes these components and offers developers an environment for interacting with Diego.</td>
</tr>
</table>

##<a id='brain-components'></a>Diego Brain Components ##

<a id='auctioneer'></a>
### Auctioneer ###

- Uses the [auction](https://github.com/cloudfoundry-incubator/auction) package
to run [Diego auctions](./architecture/diego-auction.html) for Tasks and `ActualLRP` instances

- Communicates with Cell Reps over HTTP

- Maintains a lock in the BBS that restricts auctions to one Auctioneer at a time

Refer to the [Auctioneer repo](https://github.com/cloudfoundry-incubator/auctioneer) on GitHub for more information.

<a id='converger'></a>
### Converger ###

- Uses converge methods from the Runtime-Schema to analyze snapshots of the BBS to ensure consistency and fault tolerance for Tasks and LRPs

- Acts to keep `DesiredLRP` count and `ActualLRP` count synchronized in the following ways:
    - If the `DesiredLRP` count exceeds the `ActualLRP` count, the Converger requests a start auction from the Auctioneer
    - If the `ActualLRP` count exceeds the `DesiredLRP` count, the Converger sends a stop message to the Rep on the Cell hosting an instance

- Monitors for potentially missed messages, resending them if necessary

- Maintains a lock in the BBS that limits converger performance to one Converger at a time

Refer to the [Converger repo](https://github.com/cloudfoundry-incubator/converger) on GitHub for more information.

##<a id='bbs'></a>Diego Bulletin Board System ##

- Accepts submissions, updates, and requests for Tasks and LRPs from clients through an RPC-style API over HTTP

- Maintains a real-time representation of the state of the Diego cluster, including all desired LRPs, running LRP instances, and in-flight Tasks

Refer to the [Bulletin Board System repo](https://github.com/cloudfoundry-incubator/bbs) on GitHub for more information.

##<a id='cell-components'></a>Diego Cell Components ##

Diego Cell components manage and maintain Tasks and LRPs.

<a id='receptor'></a>
### Receptor ###

- Implements a RESTful HTTP [API](https://github.com/cloudfoundry-incubator/receptor/blob/master/doc/README.md) that accepts requests for the following:
	- New Tasks
	- Changes to `DesiredLRPs`
	- Information about running Tasks and LRP instances

Refer to the [Receptor repo](https://github.com/cloudfoundry-incubator/receptor) on GitHub for more information.

<a id='rep'></a>
### Rep ###

- Represents a Cell in [Diego auctions](./architecture/diego-auction.html) for Tasks and LRPs

- Mediates all communication between the Cell and the Bulletin Board System (BBS)

- Ensures synchronization between the set of Tasks and `ActualLRPs` in the BBS with the containers present on the Cell

- Maintains the presence of the Cell in the BBS

- Runs Tasks and LRPs by asking the in-process Executor to create a container and `RunAction` recipes

Refer to the [Rep repo](https://github.com/cloudfoundry-incubator/rep) on GitHub for more information.

### Executor ###

- Implements the generic Executor actions detailed in the [API documentation](https://github.com/cloudfoundry-incubator/receptor/blob/master/doc/actions.md)

- Streams `STDOUT` and `STDERR` to the Metron agent running on the Cell

Refer to the [Executor repo](https://github.com/cloudfoundry-incubator/executor) on GitHub for more information.

### Garden ###

- Provides a platform-independent server and clients to manage Garden containers

- Defines the [garden-linux](https://github.com/cloudfoundry-incubator/garden-linux) interface for container implementation

Refer to the [Garden repo](https://github.com/cloudfoundry-incubator/garden) on GitHub for more information.

### Metron ###

Forwards application logs, errors, and application and Diego metrics to the [Loggregator](https://github.com/cloudfoundry/loggregator) Doppler component 

Refer to the [Metron repo](https://github.com/cloudfoundry/loggregator/tree/develop/src/metron) on GitHub for more information.

##<a id='bridge-components'></a>CC-Bridge Components ##

CC-Bridge components translate app-specific requests from the Cloud Controller to the Receptor, the RESTful API for Diego. These components include the following:

### Stager ###

- Translates staging requests from the Cloud Controller into generic Tasks for the Receptor

- Sends a response to the Cloud Controller when a Task completes

Refer to the [Stager repo](https://github.com/cloudfoundry-incubator/stager) on GitHub for more information.

### Nsync ###

- Consumes app requests to update the `DesiredLRPs` count and submits it to the receptor

- Periodically polls Cloud Controller for each app to ensure Diego has current desired state 

Refer to the [Nsync repo](https://github.com/cloudfoundry-incubator/nsync) on GitHub for more information.

### TPS ###

The TPS provides the Cloud Controller with information about currently running LRPs to respond to `cf apps` and `cf app APP_NAME` requests

Refer to the [TPS repo](https://github.com/cloudfoundry-incubator/tps) on GitHub for more information.

### CC-Uploader ###

- Mediates uploads from the Executor to the Cloud Controller  

- Translates simple HTTP POST requests from the Executor into complex multipart-form uploads for the Cloud Controller

Refer to the [CC-Uploader repo](https://github.com/cloudfoundry-incubator/cc-uploader) on GitHub for more information.

### File Server ###

- Serves static assets used by various Diego components

Refer to the [File Server repo](https://github.com/cloudfoundry-incubator/file-server) on GitHub for more information.

##<a id='platform-specific'></a>Platform-specific Components ##

### Garden Backends ###

Garden contains a set of interfaces that each platform-specific backend must implement. These interfaces contain methods to perform the following actions:

- Create and delete containers
- Apply resource limits to containers
- Open and attach network ports to containers
- Copy files into and out of containers
- Run processes within containers
- Stream `STDOUT` and `STDERR` data out of containers
- Annotate containers with arbitrary metadata
- Snapshot containers for redeploys without downtime

Refer to the [Garden repo](https://github.com/cloudfoundry-incubator/garden) on GitHub for more information.

#### Current Implementations ####

- [Garden-Linux](https://github.com/cloudfoundry-incubator/garden-linux) provides a Linux-specific implementation of a Garden interface.

### App Lifecycles ###

App Lifecycles implement deployment strategies. Each App Lifecycle contains the following three binaries:

- The **Builder**, which stages a CF application. The CC-Bridge runs the Builder as a Task on every staging request. The Builder performs static analysis on the application code and does any necessary pre-processing before the application is first run.

- The **Launcher**, which runs a CF application. The CC-Bridge sets the Launcher as the Action on the `DesiredLRP` for the application. The Launcher executes the start command with the correct system context, including working directory and environment variables.

- The **Healthcheck**, which performs a status check on running CF application from inside the container. The CC-Bridge sets the Healthcheck as the Monitor action on the `DesiredLRP` for the application. 

#### Current Implementations ####

- [Buildpack App Lifecycle](https://github.com/cloudfoundry-incubator/buildpack-app-lifecycle) implements the Cloud Foundry buildpack-based deployment strategy.

- [Docker App Lifecycle](https://github.com/cloudfoundry-incubator/docker-app-lifecycle) implements a Docker deployment strategy.

##<a id='other-components'></a>Other Components ##

### Consul ###

- Provides dynamic service registration and load balancing through DNS resolution

- Provides a consistent key-value store for maintenance of distributed locks and component presence

Refer to the [Consul repo](https://github.com/hashicorp/consul) on GitHub for more information.

### Consuladapter ###

Consuladapter provides a driver for interfacing with etcd

Refer to the [Consuladapter repo](https://github.com/cloudfoundry-incubator/consuladapter) on GitHub for more information.

### Route-Emitter ###

- Monitors `DesiredLRP` and `ActualLRP` states, emitting route registration and unregistration messages to the Cloud Foundry  [GoRouter](https://github.com/cloudfoundry/gorouter) when it detects changes

- Periodically emits the entire routing table to the router

Refer to the [Route-Emitter repo](https://github.com/cloudfoundry-incubator/route-emitter) on GitHub for more information.
