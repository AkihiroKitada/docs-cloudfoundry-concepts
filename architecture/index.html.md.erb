---
title: Cloud Foundry Components
---

<strong><%= modified_date %></strong>

Cloud Foundry components include a self-service application execution engine, an
automation engine for application deployment and lifecycle management, and a
scriptable command line interface (CLI), as well as integration with development
tools to ease deployment processes.
Cloud Foundry has an open architecture that includes a buildpack mechanism for
adding frameworks, an application services interface, and a cloud provider
interface.

Refer to the descriptions below for more information about Cloud Foundry
components.
Some descriptions include links to more detailed documentation.

![Cloud Foundry Architecture](../images/cf_architecture_block.png)


## <a id='routing'></a>Routing

### <a id='router'></a>Router

The [router](./router.html) routes incoming traffic to the appropriate
component, either a Cloud Controller component or a hosted application running on a Diego Cell.

The router periodically queries the Diego Bulletin Board System (BBS) for which cells and containers each application is currently running on. Then it recomputes new routing tables based on the IP addresses of each cell virtual machine (VM) and the host-side port numbers for the cell's containers.

## <a id='authentication'></a>Authentication

### <a id='uaa'></a> OAuth2 Server (UAA) and Login Server

The OAuth2 server (the [UAA](./uaa.html)) and Login Server work together to
provide identity management.

## <a id='app-lifecycle'></a>App Lifecycle

### <a id='cc'></a> Cloud Controller and Diego Brain

The [Cloud Controller](./cloud-controller.html) (CC) directs the deployment of applications.
When a developer pushes an application to Cloud Foundry, she is targeting the
Cloud Controller. The Cloud Controller then directs the Diego Brain through the [CC-Bridge](../diego/diego-architecture.html#bridge-components) to coordinate individual [Diego cells](#diego-cell) to stage and run applications

In [pre-Diego architecture](../diego/dea-vs-diego.html#design), the Cloud Controller's Droplet Execution Agent (DEA) performed these app lifecycle tasks.

The Cloud Controller also maintain records of [orgs, spaces, user roles](../roles.html), [services](../../services/overview.html), and more.

### <a id='nsync-converger'></a> nsync, Converger, and Cell Reps

To keep applications available, cloud deployments must constantly monitor their states and reconcile them with their expected states, starting and stopping processes as required. In pre-Diego architecture, the [Health Manager (HM9000)](../diego/dea-vs-diego.html#hm9k) performed this function. The nsync, Converger, and Cell Reps use a more distributed approach.

![Cloud Foundry Architecture](../images/diego/app-monitor-sync-diego.png)

These three components work along a spectrum of representations that extends between the user and the application containers. At one end, the user sets how each application should be scaled. At the other end, instances of that application running on widely-distributed VMs may crash or become unavailable.

The nsync, Converger, and Cell Rep components work together along this spectrum to keep apps running as they should. nsync watches for changes in application scaling instructions from the Cloud Controller and writes them into `DesiredLRP` structures in Diego's internal BBS database. Inside each cell, the Cell Rep watches the Garden for the state and health of the application instances running in the cell's containers, and updates corresponding `ActualLRP` values in the shared BBS as they change locally.

At the center of the process, the Diego Brain's Converger component monitors the `DesiredLRP` and `ActualLRP` values, and launches or kills application instances as appropriate to reconcile `ActualLRP` counts with `DesiredLRP` values.

## <a id='app-storage-execution'></a>App Storage and Execution

### <a id='blob'></a> Blob Store

The blob store is a repository for large binary files, which GitHub cannot easily manage because GitHub is designed for code. Blob store binaries include:

* Application code packages
* Buildpacks
* Droplets

### <a id='diego-cell'></a> Diego Cell

Each application VM has a Diego Cell that executes application start and stop actions locally, manages the VM's containers, and reports app status and other data to the BBS and [Loggregator](#metrics-logging).

In pre-Diego CF architecture, the [DEA node](./execution-agent.html) performed the task of managing the applications and containers on a VM.

## <a id='services'></a>Services

### <a id='broker'></a> Service Brokers

Applications typically depend on <%= vars.services %> such as databases
or third-party SaaS providers.
When a developer provisions and binds a service to an application, the service
broker for that service is responsible for providing the service instance.

## <a id='messaging'></a>Messaging

### <a id='bbs-consul'></a> Consul and BBS

Cloud Foundry component VMs communicate with each other internally through http and https protocols, sharing temporary messages and data stored in two locations:

* A [Consul server](../diego/diego-architecture.html#consul) stores longer-lived control data, such as component IP addresses and distributed locks that prevent components from duplicating actions.

* Diego's [Bulletin Board System](../diego/diego-architecture.html#bbs) (BBS) stores more frequently updated and disposable data such as cell and application status, unallocated work, and heartbeat messages. The BBS is currently implemented in [etcd](https://coreos.com/etcd/).

The route-emitter component uses the NATS protocol to broadcast the latest routing tables to the routers. In pre-Diego CF architecture, the [NATS Message Bus](../diego/dea-vs-diego.html#nats) carried all internal component communications.

## <a id='metrics-logging'></a>Metrics and Logging

### <a id='metrics'></a> Metrics Collector and Loggregator

The metrics collector gathers metrics and statistics from the components.
Operators can use this information to monitor a Cloud Foundry deployment.

The <%= vars.loggregator_name_or_link %> (log aggregator) system streams application logs to developers.
