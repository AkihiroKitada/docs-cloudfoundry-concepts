---
title: Diego Components
---


# <a id='diagram'></a>Diego Overview

The following diagram illustrates the major components of Diego and how they interact with other components of the Cloud Foundry ecosystem.

Components in the blue region are part of the Diego core and handle the running and monitoring of Tasks and LRPs.  These components are contained in the [Diego-Release](https://github.com/cloudfoundry-incubator/diego-release) BOSH release.

Components in the yellow region bring support for streaming logs and routing to Diego containers.  Some of these components are contained in [Diego-Release](https://github.com/cloudfoundry-incubator/diego-release) while others live in [CF-Release](https://github.com/cloudfoundry/cf-release).  The [Lattice](https://github.com/pivotal-cf-experimental/lattice) distribution includes these components and offers developers an easy-to-install environment for interacting with Diego.

The red region brings in [Cloud Controller](#cloud-controller) and the CC-Bridge.  As the diagram shows, the CC-Bridge merely interfaces with the Receptor translating app-specific messages from the CC to the more generic language of Tasks and LRPs.

[![Diego Overview](../images/diego/diego-overview.png)](http://htmlpreview.github.io/?https://raw.githubusercontent.com/cloudfoundry-incubator/diego-design-notes/master/clickable-diego-overview/clickable-diego-overview.html)

## <a id='processes'></a> Processes

The following are units of work that must be performed in a deployment. Diego receives instructions about what processes to run, allocates the work strategically across its available cells via an [auction](./diego-auction.html), and monitors the situation continuously to keep everything running as smoothly as possible.

Logs from all processes are streamed out to Loggregator's [Doppler](#doppler) component

### <a id='tasks'></a>Tasks

* Short-running
* One-off (guaranteed to run only once)
* Includes staging tasks

### <a id='lrps'></a>Long Running Processes (LRPs)

* Ongoing
* Can have multiple instances
* Includes application instances
* Entire sets of desired and actual LRPs are represented in the [BBS](#bbs)

## <a id='cf-components'></a>Cloud Foundry Components

These components are parts of [Cloud Foundry](https://github.com/cloudfoundry/cf-release) that interact closely with Diego:

### <a id='cloud-controller'></a>Cloud Controller (CC)

- Provides an API for staging and running apps.

- Implements object modelling around apps: 
	- permissions
	- buildpack selection
	- service binding

- Developers interact with the cloud controller via the [CLI](https://github.com/cloudfoundry/cli)

[**Cloud Controller on GitHub**](https://github.com/cloudfoundry/cloud_controller_ng)

### <a id='doppler'></a>Doppler

- Aggregates logs
- Stores logs in temporary buffer
- Streams logs out to third party services

[**Doppler on GitHub**](https://github.com/cloudfoundry/loggregator)

### <a id='router'></a>GoRouter

Routes incoming network traffic to processes within the CF installation, including:

- Developer apps running within Garden containers
- CF components such as Cloud Controller.

[**Router on GitHub**](https://github.com/cloudfoundry/gorouter)

## <a id='bridge-components'></a>CC-Bridge Components

The CC-Bridge components provide an interface between Diego and the Cloud Controller.  They serve, primarily, to translate app-specific notions into Diego's more generic language of LRPs and tasks:

### <a id='stager'></a>Stager

- Receives staging requests from CC

- Translates staging requests into generic Tasks

- Submits the Tasks to the Receptor

- Instructs the Cell, through the Task actions, to inject a [platform-specific binary](#platform-specific) for the staging process

- Sends a response to CC when a Task is completed (succesfully or otherwise)

[**Stager on GitHub**](https://github.com/cloudfoundry-incubator/stager)

### <a id='nsync'></a>Nsync

<!-- - Listens for desired app requests and updates/creates the desired LRPs via the Receptor. -->

- Translates app requests into desired LRPs

- Submits Desired LRPs to the receptor

- Periodically polls CC for all desired apps to ensure the desired state known to Diego is up-to-date.

[**Nsync on GitHub**](https://github.com/cloudfoundry-incubator/nsync)

### <a id='tps'></a>TPS

- Provides the CC with information about currently running LRPs.

- This information is used by the CC to responds to `cf apps` and `cf app X` requests.

[**TPS on GitHub**](https://github.com/cloudfoundry-incubator/tps)

### <a id='file-server'></a>File Server

- Mediates uploads bound for the CC coming from the Executor.

- Translates the Executor's simple HTTP POST into the complex multipart-form upload required by CC.

- Serves static assets used by various Diego components.  In particular, it serves the [App Lifecycle binaries](#app-lifecycles).

[**File-Server on GitHub**](https://github.com/cloudfoundry-incubator/file-server)

## <a id='cell-components'></a>Diego Cell Components

These Diego components deal with running and maintaining Tasks and LRPs.

There is a specificity gradient across the Rep/Executor/Garden.  The Rep is concerned with Tasks and LRPs and knows details about their lifecycles.  The Executor knows nothing about Tasks/LRPs but merely knows how to manage a collection of containers and run actions in these containers.  Garden, in turn, knows nothing about actions and simply provides a concrete implementation of a platform-specific containerization technology that can run arbitrary commands in containers.

Only the Rep and the Receptor communicate with the BBS and participate in inter-Cell communication.

### <a id='receptor'></a> Receptor

- Implements a RESTful [HTTP API](https://github.com/cloudfoundry-incubator/receptor/blob/master/doc/README.md) that receives requests for:
	- New Tasks
	- Changes to desired LRPs
	- Information about currently running Tasks and LRP instances

[**Receptor on GitHub**](https://github.com/cloudfoundry-incubator/receptor)

### <a id='rep'></a> Rep

- Represents a Cell and mediates all communication with the BBS.

- Ensures that the set of Tasks and ActualLRPs in the BBS is in sync with the containers actually present on the Cell.

- Maintains the presence of the Cell in the BBS.  Should the Cell fail catastrophically, the Converger will automatically move the missing instances to other Cells.

- Participates in [auctions](https://github.com/cloudfoundry-incubator/auction) to accept Tasks/LRPs

- Runs Tasks/LRPs by asking its in-process Executor to create a container and run action recipes.

[**Rep on GitHub**](https://github.com/cloudfoundry-incubator/rep)

### <a id='executor'></a> Executor

- Doesn't know about the Task vs LRP distinction.  

- Is primarily responsible for implementing the generic executor actions detailed in the [API documentation](https://github.com/cloudfoundry-incubator/receptor/blob/master/doc/actions.md)

- Streams Stdout and Stderr to the metron-agent running on the Cell.  These then get forwarded to Loggregator.

[**Executor on GitHub**](https://github.com/cloudfoundry-incubator/executor)

### <a id='garden'></a> Garden

- Provides a platform-independent server/client to manage garden containers

- Defines an interface to be implemented by container-runners (e.g. [garden-linux](https://github.com/cloudfoundry-incubator/garden-linux))

[**Garden on GitHub**](https://github.com/cloudfoundry-incubator/garden)

### <a id='metron'></a> Metron

Forwards application logs and application/Diego metrics to [Loggregator's Doppler component](https://github.com/cloudfoundry/loggregator)

[**Metron on GitHub**](https://github.com/cloudfoundry/loggregator/tree/develop/src/metron)

## <a id='brain-components'></a> Diego Brain Components

### <a id='auctioneer'></a> Auctioneer

- Holds [auctions](./diego-auction.html) for Tasks and ActualLRP instances.

- Communicates with Cell Reps over HTTP.

- Maintains a lock in the BBS such that ***only one*** auctioneer may conduct auctions at a time.

- Auctions are run using the [auction](https://github.com/cloudfoundry-incubator/auction) package.  

[**Auctioneer on GitHub**](https://github.com/cloudfoundry-incubator/auctioneer)

### <a id='converger'></a> Converger

- Maintains a lock in the BBS to ensure that ***only one*** converger performs convergence at a time.  This is primarily for performance considerations as convergence operations are idempotent.

- Uses the converge methods in the runtime-schema/bbs to ensure eventual consistency and fault tolerance for Tasks and LRPs

- Identifies which actions need to take place to bring DesiredLRP state and ActualLRP state into accord:
    - if an instance is missing, requests a start auction
    - if an extra instance is identified, a stop message is sent to the Rep on the Cell hosting the instance.

- Watches out for any potentially missed messages.  For example, if a Task has been in the PENDING state for too long it's possible that the request to hold an auction for the Task never made it to the Auctioneer.  In this case the Converger is responsible for resending the auction message.

[**Converger on GitHub**](https://github.com/cloudfoundry-incubator/converger)

### <a id='metrics'></a> Metrics

Reads metrics from the BBS and publishes them to Loggregator.

[**Metrics-Server on GitHub**](https://github.com/cloudfoundry-incubator/runtime-metrics-server)

## <a id='bbs'></a>Bulletin Board System

The Bulletin Board System (BBS) is an ETCD consistent store that maintains a representation of the desired and actual long running processes in a Diego runtime.

[**Bulletin Board System on GitHub**](https://github.com/cloudfoundry-incubator/runtime-schema)

## <a id='shim-like-components'></a>Shim-like components

### <a id='route-emitter'></a>Route-Emitter

- Monitors DesiredLRP state and ActualLRP state via the Receptor.  
- When a change is detected, the Route-Emitter emits route registration/unregistration messages to the [router](https://github.com/cloudfoundry/gorouter)

- Periodically emits the entire routing table to the router.

<p class='note'><strong>Note</strong>:
	Eventually the route-emitter will be a part of the router, which will communicate with the Receptor to compute the routing table.
</p>

[**Route-Emitter on GitHub**](https://github.com/cloudfoundry-incubator/route-emitter)

## <a id='platform-specific'></a>Platform-Specific Components

Diego is largely platform-agnostic.  All platform-specific concerns are delegated to two types of components: the *garden backends* and the *app lifecycles*.

### <a id='garden-backends'></a>Garden Backends

Garden contains a set of interfaces each platform-specific backend must implement. These interfaces contain methods to perform the following actions:

- Create/delete containers
- Apply resource limits to containers
- Open and attach network ports to containers
- Copy files into/out of containers
- Run processes within containers
- Streaming stdout and stderr data out of containers
- Annotate containers with arbitrary metadata
- Snapshot containers for down-timeless redeploys

[**Garden on GitHub**](https://github.com/cloudfoundry-incubator/garden)

Current implementations:

- [**Garden-Linux**](https://github.com/cloudfoundry-incubator/garden-linux) provides a linux-specific implementation of a Garden interface.

### <a id='app-lifecycles'></a>App Lifecycles

Each App Lifecycle provides a set of binaries that manage an application lifecycle that specific to Cloud Foundry.  There are three binaries:

- The **Builder** *stages* a CF application.  The CC-Bridge runs the Builder as a Task on every staging request.  The Builder perfoms static analysis on the application code and does any necessary pre-processing before the application is first run.

- The **Launcher** *runs* a CF application.  The CC-Bridge sets the Launcher as the Action on the CF application's DesiredLRP.  The Launcher executes the user's start command with the correct system context (working directory, environment variables, etc).  

- The **Healthcheck** performs a status check of running CF application from inside the container.  The CC-Bridge sets the Healthcheck as the Monitor action on the CF application's DesiredLRP. 

Current implementations:

- [**Buildpack-App-Lifecycle**](https://github.com/cloudfoundry-incubator/buildpack-app-lifecycle) implements a traditional buildpack-based lifecycle.

- [**Docker-App-Lifecycle**](https://github.com/cloudfoundry-incubator/docker-app-lifecycle) implements a docker-based lifecycle.

## <a id='other-components'></a>Other Components

###<a id='etcd'></a>ETCD

- Is the consistent store at the heart of diego

- All components that access etcd do so via the runtime-schema/bbs.

[**ETCD on GitHub**](https://github.com/coreos/etcd)

### <a id='storeadapter'></a>Storeadapter

Provides a driver for interfacing with etcd.

[**Storeadapter on GitHub**](https://github.com/cloudfoundry/storeadapter)