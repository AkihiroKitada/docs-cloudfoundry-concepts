---
title: Diego Architecture
---

See [Diego Components](./diego-pedia.html) for a glossary of Cloud Foundry components related to Diego.

## <a id='what-is'></a>What is Diego?

Diego is the next-generation runtime powering Cloud Foundry (CF).

Diego schedules and runs **Tasks** and **Long Running Processes**:

> A **Task** is a one-off job and is guaranteed to be run at most once.

> A **Long Running Process**, (LRP) such as an app, is meant to run until explicitly terminated, and may have multiple instances.  

Diego maintains a representation of the desired and actual LRPs, and moves the total state of actual LRPs toward the total state of desired LRPs by creating and destroying LRPs if requirements change, or in response to crashes or network failures.

Diego's Receptor components recieve requests to add or delete LRP instances, such as app instances, using a [RESTful HTTP API](https://github.com/cloudfoundry-incubator/receptor/blob/master/doc/README.md).

Receptors manipulate Diego's representation of its desired LRPs in the [Bulletin Board System \(BBS\)](./diego-pedia.html#bbs), an up-to-date cache of the state of the Diego cluster (including a picture-in-time of all desired LRPs, running LRP instances, and inflight Tasks).

The [Converger](./diego-pedia.html#converger) operates on the BBS periodically and broadcasts requests to start or stop LRPs as needed, based on a comparison of desired and actual LRPs.

Diego's [Auctioneer](./diego-pedia.html#auctioneer) distributes Tasks and LRPs to the cluster of Diego Cells via an [Auction](https://github.com/cloudfoundry-incubator/auction) involving the Cell [Rep](./diego-pedia.html#rep)s.  Once a Task/LRP is assigned to a Cell, the [Executor](./diego-pedia.html#executor) spins up a [Garden](./diego-pedia.html#garden) container and executes the work encoded in the Task/LRP.  This work is encoded as a generic, platform-independent, recipe of composable [actions](https://github.com/cloudfoundry-incubator/receptor/blob/master/doc/actions.md).

Diego interfaces with [doppler](./diego-pedia.html#doppler) to provide real-time streaming logs for all Tasks/LRPs.  Diego also interfaces with the [gorouter](./diego-pedia.html#router) to automatically route web traffic to running LRP instances.

## <a id='diego-cf'></a> Diego and Cloud Foundry

Diego is abstracted away from the Cloud Controller and other Cloud Foundry components such as the Loggregator and the Router. Non-Diego CF components consume Diego via the [Receptor API](https://github.com/cloudfoundry-incubator/receptor/blob/master/doc/README.md).

Presently, there is a translation layer called the CC-Bridge that converts the [Cloud Controller](./diego-pedia.html#cloud-controller)'s domain-specific requests to stage and run applications into requests terms that Diego understands: Tasks and LRPs.  Eventually Cloud Controller will be modified to communicate directly with a Diego component called the [Receptor](./diego-pedia.html#receptor).

The process of staging and running a CF application is complex and filled with platform and implementation-specific details.  We encapsulate these concerns in a triad of binaries known collectively as the [App Lifecycle](./diego-pedia.html#app-lifecycles).  The Tasks and LRPs produced by the CC-Bridge download the App Lifecycle binaries and run them to stage, start, and health-check CF applications.

## <a id='conclusion'></a>Working Together

Diego is a complex system with many moving parts. The interactions and high-level behavior of an entire Diego runtime deployment can be monitored and tested using the following releases:

### <a id='runtime-schema'></a>Runtime-Schema

- encodes all communication between Diego components and the BBS.  The Receptor, Rep, and Converger are the primary consumers of Runtime-Schema.

- access to the consistent store is mediated via the BBS.  The BBS is comprised of several domain-specific sub-BBS packages.  Each Diego component is then given a *view* into the BBS (implemented as a Golang interface) to clarify the role and responsibility of the component.

- the models by which components communicate are encoded in the models package.

[**Runtime-Schema on GitHub**](https://github.com/cloudfoundry-incubator/runtime-schema)

### Inigo

- is an integration test suite that launches the various Diego components and excercises them through various test cases.  As such, Inigo *validates* that a given set of component versions are mutually compatible.

- in addition to excercising various *non-exceptional* test cases, Inigo can excercise exceptional cases (e.g. when a component fails).

[**Inigo on GitHub**](https://github.com/cloudfoundry-incubator/inigo)

### Auction

- encodes the behavioral details around the auction.

- includes a simulation test suite that validates the correctness and performance of the auction algorithm.  The simulation can be run for different algorithms, at different scales.  The simulation can either be run in-process (for quick feedback loops) or across multiple processes (to understand the role of communication in the auction) or even across multiple machines in a cloud-like infrastructure (to understand the impact of latency on the auction).

- the auctioneer and rep use the auction package to participate in the auction.

[**Auction on GitHub**](https://github.com/cloudfoundry-incubator/auction)

### Diego Acceptance Tests

- are a suite of acceptance-level tests that run against a deployment of CF release and Diego release.

- these exercise a number of happy-path test cases across the entire stack.

- use the cf cli to run the tests.

[**Diego-Acceptance-Tests on GitHub**](https://github.com/cloudfoundry-incubator/diego-acceptance-tests)

## <a id='release'></a> The Release

Diego is packaged up as a bosh release called [**Diego-Release**](https://github.com/cloudfoundry-incubator/diego-release).

The [README](https://github.com/cloudfoundry-incubator/diego-release) includes detailed instructions for getting a bosh-lite deployment up and running.

Diego-Release is also the **canonical** `GOPATH` for the Diego.  All development takes place in Diego-Release

