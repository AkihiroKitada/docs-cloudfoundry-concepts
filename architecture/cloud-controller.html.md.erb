---
title: Cloud Controller
---

The Cloud Controller is written in Ruby and provides REST API endpoints for
clients to access the system.
The Cloud Controller maintains a database with tables for orgs, spaces, apps,
services, service instances, user roles, and more.

## <a id='database'></a>Database (CC_DB) ##

The Cloud Controller database has been tested with Postgres.

## <a id='blob-store'></a>Blob Store ##

The Cloud Controller manages a blob store for the following:

* **Resources**: Files that are uploaded to the Cloud Controller with a unique SHA such that they can be reused without re-uploading the file

* **App Packages**: Unstaged files that represent an application

* **Droplets**: Result of taking an app package, staging it by processing a buildpack, and preparing it to run

The blob store uses the [Fog](http://fog.io/) Ruby gem such that it can use abstractions like Amazon S3 or an NFS-mounted file system for storage.

## <a id='nats'></a>NATS Messaging ##

The Cloud Controller interacts with other core components of the Cloud Foundry
platform using the NATS message bus.
For example, the Cloud Controller uses NATS when performing the following
interactions:

* Instructing a DEA to stage an application by processes a buildpack for the app
    and to prepare it to run
* Instructing a DEA to start or stop an application
* Receiving information from the Health Manager about applications
* Subscribing to Service Gateways that advertise available services
* Instructing Service Gateways to handle provisioning, unprovisioning, binding,
    and unbinding operations for services

## <a id='testing'></a>Testing ##

By default `rspec` runs a test suite with the SQLite in-memory database.
Specify a connection string using the `DB_CONNECTION` environment variable to
test against Postgres and MySQL. For example:

~~~
    DB_CONNECTION="postgres://postgres@localhost:5432/ccng" rspec
    DB_CONNECTION="mysql2://root:password@localhost:3306/ccng" rspec
~~~

Travis currently runs three build jobs against SQLite, Postgres, and MySQL.

## <a id='logs'></a>Logs ##

Cloud Controller manages its logs using
[Steno](http://github.com/cloudfoundry/steno).
Each log entry includes a **source** field to designate from which code module
the entry originates.
Some of the possible sources are `cc.app`, `cc.app_stager`, `cc.dea.client` and
`cc.healthmanager.client`.

## <a id='configuration'></a>Configuration ##

The Cloud Controller uses a YAML configuration file.
For an example, see `config/cloud_controller.yml`.
Some of the keys the Cloud Controller reads from this configuration file
include:

* `logging`: A [Steno configuration
    hash](http://github.com/cloudfoundry/steno#from-yaml-file)
* `bulk_api`: - Basic auth credentials for the application state bulk API.
    In Cloud Foundry, the health manager uses this endpoint to retrieve the
    expected state of every user application.
* `uaa`: URL and credentials for connecting to the [UAA](./uaa.html), the Cloud
    Foundry OAuth 2.0 server.