---
title: Component&#58 Cloud Controller
owner: CAPI
---

<strong><%= modified_date %></strong>

The Cloud Controller provides REST API endpoints for clients to access the
system.
The Cloud Controller maintains a database with tables for orgs, spaces,
services, user roles, and more.

##<a id='communications'></a>Cloud Controller Communications

Refer to the following diagram for information about how the Cloud Controller handles internal and external communications.

<%= image_tag '../images/cc-communications.png' %>

View a [larger version](../images/cc-communications.png) of this image.

##<a id='auction'></a>Diego Auction ##

The Cloud Controller uses the [Diego Auction](../diego/diego-auction.html) to balance application processes over the [cells](index.html#diego-cell) in a Cloud Foundry installation.

##<a id='database'></a>Database (CC_DB) ##

The Cloud Controller database has been tested with Postgres.

##<a id='blob-store'></a>Blobstore ##

The Cloud Controller manages blobstores for the following:

* **Resources**: Files that are uploaded to the Cloud Controller with a unique
    SHA such that they can be reused without re-uploading the file

* **App Packages**: Unstaged files that represent an application

* **Droplets**: Result of taking an app package, staging it by processing a
    buildpack, and preparing it to run

* **Buildpacks**: The buildpacks available to stage apps with

* **Buildpack Cache**: Cached artifacts resulting from the staging process

The blobstore uses the [Fog](http://fog.io/) Ruby gem in order to use
services like Amazon S3, WebDAV, or the NFS filesystem for storage. 

Typically, the same blobstore is used to store all five types of blobs, but
the Cloud Controller may be configured to use a separate blobstore for each type.

##<a id='nats'></a>NATS Messaging ##

The Cloud Controller interacts with other core components of the Cloud Foundry
platform using the NATS message bus.
For example, the Cloud Controller uses NATS when performing the following
interactions:

* Instructing a cell to stage an application by processes a buildpack for the app
    and to prepare it to run
* Instructing a cell to start or stop an application
* Receiving information from the Health Manager about applications
* Subscribing to Service Gateways that advertise available services
* Instructing Service Gateways to handle provisioning, unprovisioning, binding,
    and unbinding operations for services

##<a id='testing'></a>Testing ##

By default `rspec` runs a test suite with the SQLite in-memory database.
Specify a connection string using the `DB_CONNECTION` environment variable to
test against Postgres and MySQL. For example:

~~~
    DB_CONNECTION="postgres://postgres@localhost:5432/ccng" rspec
    DB_CONNECTION="mysql2://root:password@localhost:3306/ccng" rspec
~~~

Travis currently runs three build jobs against SQLite, Postgres, and MySQL.

<%= vars.cloud_controller_logging %>
