---
title: Gorouter
owner: Routing
---



Gorouter routes traffic coming into Cloud Foundry to the appropriate component, whether
the request comes from an operator addressing the [Cloud Controller](./cloud-controller.html)
or from an application user accessing an app running on a Diego Cell. Handling both platform
and app requests with the same process centralizes routing logic and simplifies support for
WebSocket and other types of traffic (for example, through HTTP CONNECT).

See the following instructions for help getting started with Gorouter
in a standalone environment.

## <a id='setup'></a>Setup ##

<pre class="terminal">
$ git clone https://github.com/cloudfoundry/gorouter.git
$ cd gorouter
$ git submodule update --init
$ ./bin/go install gorouter/gorouter
$ gem install nats
</pre>

### <a id='start'></a>Start ###

<pre class="terminal">
# Start NATS server in daemon mode
$ nats-server -d

# Start gorouter
$ ./bin/gorouter
</pre>

## <a id='use'></a>Usage ##

Gorouter receives route updates through [NATS](./messaging-nats.html).
By default, routes that have not been updated in two minutes are pruned. Therefore, to maintain an active route, you must ensure that the route is updated at least every two minutes.
The format of these route updates is as follows:

~~~json
{
  "host": "127.0.0.1",
  "port": 4567,
  "uris": [
    "my_first_url.vcap.me",
    "my_second_url.vcap.me"
  ],
  "tags": {
    "another_key": "another_value",
    "some_key": "some_value"
  }
}
~~~

Such a message can be sent to both the `gorouter.register` subject to register URIs,
and to the `gorouter.unregister` subject to deregister URIs, respectively.

<pre class="terminal">
$ nohup ruby -rsinatra -e 'get("/") { "Hello!" }' &
$ nats-pub 'gorouter.register' '{"host":"127.0.0.1","port":4567,
    "uris":["my_first_url.vcap.me","my_second_url.vcap.me"],
    "tags":{"another_key":"another_value","some_key":"some_value"}}'
Published [gorouter.register] : '{"host":"127.0.0.1","port":4567,
    "uris":["my_first_url.vcap.me","my_second_url.vcap.me"],
    "tags":{"another_key":"another_value","some_key":"some_value"}}'
$ curl my_first_url.vcap.me:8080
Hello!
</pre>

## <a id='instrumentation'></a>Instrumentation ##

Gorouter provides `/varz` and `/healthz` http endpoints for monitoring.

The `/routes` endpoint returns the entire routing table as JSON. Each route has
an associated array of `host:port` entries.

All of the endpoints require http basic authentication, credentials for which you
can acquire through NATS. You can explicitly set the `port`, `user` and password
(`pass` is the config attribute) in the `gorouter.yml` config file `status` section.

~~~yaml
status:
  port: 8080
  user: some_user
  pass: some_password
~~~

Example interaction with `curl`:

<pre class="terminal">
$ curl -vvv "http://someuser:somepass@127.0.0.1:8080/routes"
* About to connect() to 127.0.0.1 port 8080 (#0)
*   Trying 127.0.0.1...
* Connected
* Connected to 127.0.0.1 (127.0.0.1) port 8080 (#0)
* Server auth using Basic with user 'someuser'
> GET /routes HTTP/1.1
> Authorization: Basic c29tZXVzZXI6c29tZXBhc3M=
> User-Agent: curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8r zlib/1.2.5
> Host: 127.0.0.1:8080
> Accept: */*
>
< HTTP/1.1 200 OK
< Content-Type: application/json
< Date: Mon, 25 Mar 2013 20:31:27 GMT
< Transfer-Encoding: chunked
<
{"0295dd314aaf582f201e655cbd74ade5.cloudfoundry.me":["127.0.0.1:34567"],
"03e316d6aa375d1dc1153700da5f1798.cloudfoundry.me":["127.0.0.1:34568"]}
</pre>

### <a id="logs"></a> Logs

This section provides details about Gorouter logging.

#### <a id="levels"></a> Levels

The following table describes the log levels supported by Gorouter.
<% if vars.platform_code == 'CF' %>
The log level is specified in the configuration YAML file for Gorouter.
<% else %>
The log level is set to `debug` and is not configurable.
<% end %>

<table>
  <tr>
    <th>Message</th>
    <th>Description</th>
    <th>Examples</th>
  </tr>
  <tr>
    <td><code>fatal</code></td>
    <td>Gorouter is unable to handle any requests due to a fatal error.</td>
    <td> Gorouter cannot bind to its TCP port, a CF component has
  published invalid data to Gorouter.</td>
  </tr>
  <tr>
    <td><code>error</code></td>
    <td>An unexpected error has occurred.</td>
    <td>Gorouter failed to fetch token from UAA service.</td>
  </tr>
  <tr>
    <td><code>info</code></td>
    <td>An expected event has occurred.</td>
    <td>Gorouter started or exited, Gorouter has begun to prune
  routes for stale droplets.</td>
  </tr>
  <tr>
    <td><code>debug</code></td>
    <td>A lower-level event has occurred.</td>
    <td>Route registration, route unregistration.</td>
  </tr>
</table>

#### <a id="message-contents"></a> Message Contents

This section section provides a sample Gorouter log entry and explanation of the contents.

`[2017-02-01 22:54:08+0000] {"log_level":0,"timestamp":1485989648.0895808,"message":"endpoint-registered","source":"vcap.Gorouter.registry","data":{"uri":"0-*.login.bosh-lite.com","backend":"10.123.0.134:8080","modification_tag":{"guid":"","index":0}}}
`

<table>
  <tr>
    <th>Property</th>
    <th>Description</th>
  </tr>
  <tr>
    <td><code>log_level</code></td>
    <td>Logging level of the message</td>
  </tr>
  <tr>
    <td><code>timestamp</code></td>
    <td>Epoch time of the log</td>
  </tr>
  <tr>
    <td><code>message</code></td>
    <td>Content of the log entry</td>
  </tr>
  <tr>
    <td><code>source</code></td>
    <td>Gorouter function that initiated the log entry</td>
  </tr>
  <tr>
    <td><code>data</code></td>
    <td>Additional information that varies based on the message</td>
  </tr>
</table>

#### <a id="about-access-logs"></a> About Access Logs

Access logs provide information for the following fields when recieving a request:

`<Request Host> - [<Start Date>] "<Request Method> <Request URL> <Request Protocol>" <Status Code> <Bytes Received> <Bytes Sent> "<Referer>" "<User-Agent>" <Remote Address> <Backend Address> x_forwarded_for:"<X-Forwarded-For>" x_forwarded_proto:"<X-Forwarded-Proto>" vcap_request_id:<X-Vcap-Request-ID> response_time:<Response Time> gorouter_time:<GoRouter Time> app_id:<Application ID> app_index:<Application Index> <Extra Headers>`

* The following are optional fields: <code>Status Code</code>,  <code>Response Time</code>, <code>Application ID</code>, <code>Application Index</code>, and <code>Extra Headers</code>.

* If the access log lacks a <code>Status Code</code>,  <code>Response Time</code>, <code>Application ID</code>, or <code>Application Index</code>, the corresponding field shows `-`.

* `Response Time` is the total time it takes for the request to go through the Gorouter to the app
   and for the response to travel back through the Gorouter.
   This includes the time the request spends traversing the network to the app and back again to the Gorouter.
   It also includes the time the app spends forming a response.

* `GoRouter Time` is the total time it takes for the request to go through the Gorouter
   initially plus the time it takes for the response to travel back through the Gorouter.
   This does not include the time the request spends traversing the network to the app.
   This also does not include the time the app spends forming a response.


<p class="note"><strong>Note</strong>: Access logs are also redirected to syslog.</p>
