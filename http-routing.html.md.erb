---
title: HTTP Routing
owner: Routing
---

<strong><%= modified_date %></strong>

This topic describes features of HTTP routing handled by the Cloud Foundry (CF) [router](http://docs.cloudfoundry.org/concepts/architecture/#routing).

## <a id="sessions"></a>Sticky Sessions ##

The CF router supports session affinity or "sticky sessions" for incoming HTTP requests to compatible applications. 

Sticky sessions means that when multiple instances of an application are running on CF, requests from a particular client always reach the same application instance. This allows applications to store session data specific to a user session.

Sticky sessions require applications to support returning a `JSESSIONID` cookie in responses. 

If an application returns a `JSESSIONID` cookie to a client request, the CF routing tier appends a second cookie, called `VCAP_ID`. On subsequent requests, the client must provide both the `JSESSIONID` and `VCAP_ID` cookies. The CF routing tier uses the `VCAP_ID` to forward client requests to the same application instance every time. 

If the application instance identified by the `VCAP_ID` crashes, the router attempts to route the request to a different instance of the application. If the router finds a healthy instance of the application, it initiates a new sticky session. 

<p class="note"><strong>Note</strong>: CF does not persist or replicate HTTP session data across application instances. If an instance of an application crashes or is stopped, session data for that instance is lost. If you require session data to persist across crashed or stopped instances, or to be shared by all instances of an application, store session data in a CF marketplace service that offers data persistence.</p> 

## <a id="http-headers"></a>HTTP Headers ##

HTTP traffic passed from the CF router to an app includes the the following HTTP headers: 

* `X-Forwarded-Proto` gives the scheme of the HTTP request from the client. The scheme is HTTP if the client made an insecure request or HTTPS if the client made a secure request. Developers can configure their apps to reject insecure requests by inspecting the HTTP headers of incoming traffic and rejecting traffic that includes `X-Forwarded-Proto` with the scheme of HTTP. 

* `X-Forwarded-For` gives the IP address of the client originating the request.

## <a id="tls"></a>SSL/TLS Termination ##

Depending on your needs, you can configure your deployment to terminate SSL/TLS at the CF router, the CF router and the load balancer, or the load balancer only. For more information, see the [Securing Traffic into Cloud Foundry](../adminguide/securing-traffic.html) topic.

## <a id="transparent"></a>Transparent Retries ##

If the backend connection cannot process the HTTP request by returning a success or a failure, the CF router re-attempts requests that are currently at the routing tier to another available backend transparently to the HTTP client. 

## <a id="round-robin"></a>Round-Robin Load Balancing ##

The CF router uses a round-robin algorithm for load balancing incoming requests to apps. As clients make requests, the router rotates through a list of IP addresses for the cells that host the app and the port numbers for the cell's containers.

## <a id="sockets"></a>WebSockets ##

TK.