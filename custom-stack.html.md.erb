---
title: Adding a Custom Stack
owner:
  - Buildpacks & Stacks
  - Diego
  - Runtime OG
---

<strong><%= modified_date %></strong>


This topic outlines how add a custom stack under Diego architecture. To add a stack, you first build a BOSH job template that creates the stack. Follow the [BOSH release directory format](http://bosh.io/docs/create-release.html). The scripts for building the available Cloud Foundry stacks and your own custom stacks reside in the [Cloud Foundry Stacks](http://github.com/cloudfoundry/stacks) repository.

After creating the BOSH job template, you configure your deployment manifests so that Cloud Foundry can run the job when creating cells. You do this by adding the job template to the lists of cell jobs, and associating the stack with its lifecycle binaries and rootfs location.

The following example adds a new Linux-based `pancakes` stack for use with [garden-linux](https://github.com/cloudfoundry-incubator/garden-linux). This `pancakes` stack could, for example, support applications that require an old version of CentOS or Ubuntu.

##<a id='add-new-stack'></a>Step 1: Create a BOSH Job Template ##

Create a BOSH release `pancakes-release` for a job template that expands your stack into a subdirectory on the host machine, typically under `/var/vcap/packages` or `/var/vcap/data`. For example, a `pancakes-rootfs` template might create a full Linux root file system in the directory `/var/vcap/packages/pancakes-rootfs/rootfs`. See the [‘rootfses’ job template in diego-release](https://github.com/cloudfoundry/cflinuxfs2-rootfs-release/tree/master/jobs/cflinuxfs2-rootfs-setup) for one way to do this.

* In your `pancakes-release`, include a `pancakes-app-lifecycle` package and job template containing a gzipped tar archive of the lifecycle binaries, `pancakes-app-lifecycle.tgz`. 
Lifecycle binaries are the helper programs that stage and run apps on your stack. For examples of app lifecycle binary source code, see the diego-release repo:
  * [Buildpack App Lifecycle](https://github.com/cloudfoundry-incubator/diego-release/tree/develop/packages/buildpack_app_lifecycle)
  * [Docker App Lifecycle](https://github.com/cloudfoundry-incubator/diego-release/tree/develop/packages/docker_app_lifecycle)
  * [Windows App Lifecycle](https://github.com/cloudfoundry-incubator/diego-release/tree/develop/packages/windows_app_lifecycle)  

* The job template spec file must list the`pancakes-app-lifecycle` package as a
 dependency, but the job does not have to do anything. When `pancakes-app-lifecyle` is listed as a dependency, BOSH adds the binary to `/var/vcap/packages` to make it available.

##<a id='update-manifests'></a>Step 2: Update the Manifests ###

1. Add the `pancakes-rootfs` job and release name to the Diego manifest, along with other job templates defined for the `cell` object. Adding this job template to the Diego manifest makes the expanded rootfs available locally on the Diego cell, at ‘/var/vcap/packages/pancakes-rootfs/rootfs’. For example, in the manifests generated with the [spiff-based tooling](https://github.com/cloudfoundry-incubator/spiff) in [diego-release](https://github.com/cloudfoundry-incubator/diego-release), add the lines shown in **bold** to the following list of cell job templates:

    <pre>
      &#45; name: rep
        release: diego
      &#45; name: consul_agent
        release: cf
      &#45; name: garden
        release: garden-linux
      &#45; name: rootfses
        release: diego
      <b>&#45; name: pancakes-rootfs
        release: pancakes</b>
      &#45; name: metron_agent
        release: cf
    </pre>
  
1. The `diego.rep.preloaded_rootfses` property of the Cell Rep holds an array associating stacks with their file system root locations. Add a pair to this list to associate the `pancakes` stack with its file system root location, set up on the cell by the `pancakes-rootfs` job. For example, in the `preloaded_rootfses:` property under `rep:` in your [Diego manifest](https://github.com/cloudfoundry-incubator/diego-release), set the array to the following by adding the text shown in **bold**:

    <pre>
      ["cflinuxfs2:/var/vcap/packages/cflinuxfs2/rootfs",
      <b>"pancakes:/var/vcap/packages/pancakes-rootfs/rootfs"</b>]
    </pre>

1. Add `pancakes-app-lifecycle` to the `base_job_templates` list under the `file-server` Diego job. In [diego-release](https://github.com/cloudfoundry-incubator/diego-release), this currently resides in the `access` job template group. For example, add the lines shown in **bold** to the following list of job templates under `access`:

    <pre>
    &#45; name: ssh_proxy
      release: diego
    &#45; name: consul_agent
      release: cf
    &#45; name: metron_agent
      release: cf
    &#45; name: file_server
      release: diego
    <strong>&#45; name: pancakes-app-lifecycle
      release: pancakes</strong>
    </pre>

1. Configure the stager and nsync components to use the `pancakes` lifecycle binary bundle to start and stop apps running on the `pancakes` stack. For example, in [CAPI release](https://github.com/cloudfoundry/capi-release), add the line shown in **bold** in the `default` list under the manifest definitions for both `diego.nsync.lifecycle_bundles` and `diego.stager.lifecycle.bundles`:

    <pre>
      description: "List of lifecycle bundles arguments for different stacks in form 'lifecycle-name:path/to/bundle'"
      default:
        &#45; "buildpack/cflinuxfs2:buildpack_app_lifecycle/buildpack_app_lifecycle.tgz"
        <b>&#45; "buildpack/pancakes:pancakes-app-lifecycle/pancakes-app-lifecycle.tgz"</b>
        &#45; "buildpack/windows2012R2:windows_app_lifecycle/windows_app_lifecycle.tgz"
        &#45; "docker:docker_app_lifecycle/docker_app_lifecycle.tgz"
    </pre>

1. Configure the Cloud Controller to  with the new stack by adding it to the ‘cc.stacks’ property in the CF manifest. For example, in the [diego-release](https://github.com/cloudfoundry-incubator/diego-release) manifest generation stubs for CF, add the lines shown in **bold**:

    <pre>
    properties:
      cc:
        stacks:
          &#45; name: "cflinuxfs2"
            description: "Cloud Foundry Linux-based filesystem"
          &#45;  name: "windows2012R2"
            description: "Windows Server 2012 R2"
          <b>&#45; name: "pancakes"
            description: "Linux-based filesystem, with delicious pancakes"</b>
    </pre>

